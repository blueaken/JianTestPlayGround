看到这里，是不是有点感觉了呢，我们一步一步去消除servlet的XML配置的过程，其实就是在慢慢的写出一个简单工厂模式，只是在这之中，抽象的产品接
口是现成的，也就是Servlet接口。

虽说这些个elseif并不是好代码的征兆，不过这个简单工厂最起码帮我们解决了恶心的xml配置，说起来也算功不可没。

现在我们可以请求/contextPath/servlet/login来访问LoginServlet，而不再需要添加web.xml的配置，虽说这么做，我们对修改是开放的，因为每
增加一个servlet，我们都需要修改工厂类，去添加一个if判断，但是LZ个人还是觉得我宁可写if，也不想去copy那个当初让我痛不欲生的xml标签，虽
说我刚才还说让你忘掉elseif，我说过吗？好吧。。我说过，但是这只是我们暂时的做法，我们可以有很多种做法去消除掉这些elseif。

简单工厂是设计模式当中相对比较简单的模式，它甚至都没资格进入GOF的二十三种设计模式，所以可见它多么卑微了，但就是这么卑微的一个设计模式，也
能真正的帮我们解决实际当中的问题，虽说这种解决一般只能针对规模较小的项目。

写到这里，简单工厂模式当中出现的角色，已经很清晰了。我们上述简单工厂当中设计到的类就是Servlet接口，ServletFactory以及各种具体的
LoginServlet，RegisterServlet等等。

总结起来就是一个工厂类，一个产品接口（其实也可以是一个抽象类，甚至一个普通的父类，但通常我们觉得接口是最稳定的，所以基本不需要考虑普通
父类的情况），和一群实现了产品接口的具体产品，而这个工厂类，根据传入的参数去创造一个具体的实现类，并向上转型为接口作为结果返回。

我们在这里将上述穿插的简单工厂模式抽离出来，注释中有LZ个人的见解，帮助各位理解。


 其实我们针对创建Servlet实例这一部分逻辑的控制依旧有很多很多的优化余地，但是限于本章介绍的内容，所以我们就适可而止。

LZ觉得想简单工厂这种没有什么技术上的难度，纯粹是依照一些业务场景而出现的设计模式，LZ就必须要创造出一个比较真实的业务场景或者现实中的例
子，才能更好的诠释。所以本次LZ先拿出了我们经常做的WEB项目，以后LZ也会尽量举一些实际应用的例子。


