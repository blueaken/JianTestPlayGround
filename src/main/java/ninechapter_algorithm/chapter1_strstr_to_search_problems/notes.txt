第一节 从strStr谈起

- 做之前先后面试官交流想法，得到确认后再开始写代码
- 与面试官愉快交流 （future colleague) 而不要去证明人家蠢
- coding style is important － interviewer takes you as future colleague
- corner case check
- 做完主动提供test case cover
   - happy path
   - corner case

用搜索树模式来解决搜索问题 － NP problem, code ganker
- 调用递归之前和之后状态要保持一致（code ganker也提到同样的意思）
- Time Complexity you can say O(2^N) but is actually O(N*2^N), repeat 2^N for each node
  of the search tree. 但对code ganker的遍历递归来说，似乎是O(2^N),对每一种可能性遍历了一次。

- 注意和code ganke解题模版中不同的是循环中调用递归的控制变量：
  1. 从index＋1变到i+1。其中i＋1是只访问当前i之后的数组元素，而index＋1是访问当前index之后的所有元素。
  从效率i+1的时间效率更高，体会其中的区别。
  2. 循环变量i的初始search tree是从index开始，而code ganker是从0开始。一个是为了访问以后的元素，一个是
  为了遍历所有的可能性。
- 从和面试官交流效果来看两种方法都可以容易画图交流，见两幅手绘图。

- 面试前看最近的面经还是有帮助的

Search Problems note:

基本模式就是带循环的递归遍历所有的可能性，可以将Subset和Permutation作为基本模版。一些变化有：
－ input数组的元素是否可以无限制使用，是的话
1. 递归使用start，而且递归变量也为i。如Combination Sum 1
2. 循环从0开始，但是跳过已经用过的元素，如PERMUTATION.

不是的话，则
递归使用start，而且递归变量为i＋1，如Subset 1，2.

－ 对付重复元素的跳过
可以用判断搜索树是不是处于当前index，而且当前元素不等于前面的元素。