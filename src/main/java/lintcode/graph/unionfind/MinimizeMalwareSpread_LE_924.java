package lintcode.graph.unionfind;

public class MinimizeMalwareSpread_LE_924 {
    /**
     12.22.23
     - try Union Find, after reading the solution link: https://leetcode.com/problems/minimize-malware-spread/solutions/988233/java-2-approaches-union-find-and-dfs-beats-100/
     */
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;

        // init UF connections
        UF uf = new UF(n);
        for (int i = 0; i < n; i++) {
            for (int j = i+1; j < n; j++) {
                if (graph[i][j] == 1) {
                    uf.union(i, j);
                }
            }
        }

        int[] count = new int[n];
        for (int affectedNode : initial) {
            int root = uf.find(affectedNode);
            count[root]++;
        }

        // if there is only one affected node in a connected component then record its index as candidate
        int max = 0, ans = initial[0];
        for (int affectedNode : initial) {
            int root = uf.find(affectedNode);
            int curSize = 0;
            if (count[root] == 1) {
                curSize = uf.getParentSize(root);
            }
            // need to handle the affected size is 0 and find the smallest index
            if (curSize > max || (curSize == max && affectedNode < ans)) {
                max = curSize;
                ans = affectedNode;
            }
        }

        return ans;
    }

    class UF {
        int count;
        int[] parent;
        int[] size;

        UF(int n) {
            this.count = n;
            parent = new int[n];
            size = new int[n];
            for (int i = 0; i < n; i++) {
                parent[i] = i;
                size[i] = 1;
            }
        }

        int find(int x) {
            if (parent[x] != x) {
                x = find(parent[x]);
            }
            return parent[x];
        }

        void union(int p, int q) {
            int rootP = find(p);
            int rootQ = find(q);

            if (rootP == rootQ) {
                return;
            }

            parent[rootP] = rootQ;
            count--;
            size[rootQ] += size[rootP];
        }

        int getParentSize(int parent) {
            return size[parent];
        }

    }


    public static void main(String[] args) {
        MinimizeMalwareSpread_LE_924 solution = new MinimizeMalwareSpread_LE_924();
        int[][] graph = {{1,0,0,0,1,0,0,0,0,0,1},{0,1,0,1,0,0,0,0,0,0,0},{0,0,1,0,0,0,0,1,0,0,0},{0,1,0,1,0,1,0,0,0,0,0},{1,0,0,0,1,0,0,0,0,0,0},{0,0,0,1,0,1,0,0,1,1,0},{0,0,0,0,0,0,1,1,0,0,0},{0,0,1,0,0,0,1,1,0,0,0},{0,0,0,0,0,1,0,0,1,0,0},{0,0,0,0,0,1,0,0,0,1,0},{1,0,0,0,0,0,0,0,0,0,1}};
        int[] initial = {7,8,6,2,3};
        System.out.println(solution.minMalwareSpread(graph, initial));
    }
}
